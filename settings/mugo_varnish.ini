#?ini charset="utf-8"?

[VarnishSettings]
#
# Multiple varnish servers is supported
# You can add as many varnish servers as you want
# The PURGE request will be sent to each of them
#
#
# The format is:
# VarnishServer[]=<hostname>:<listening-port>
# For example if your varnish server is called "varnish1" and
# listens to port 6081 you will get the following configuration
# VarnishServer[]=varnish1:6081
#
VarnishServers[]
VarnishServers[]=127.0.0.1:88


# Sets the curl timeout in seconds
ConnectionTimeout=1

# Maximal ban requests
MaxBanRequests=1000

# Use site.ini/[ContentSettings]/CacheThreshold: if it is exceeded a global expiry is used instead
UseCacheThresholdValue=disabled

UseCurlMultiHandler=enabled

# Enable to write every purge to the log file mugo_varnish_purges.log
LogPurges=disabled

# Enable to write a debug file that contains log information about
# the curl calls. The file resets with each curl call
DebugCurl=disabled

# When caching pages for logged in users, the roles and role limitations are used to build the user hash (see StaticCacheMugoVarnish::getUserHash)
# To increase security, we can also use a once-daily timestamp to build the user hash
AppendTimestampToUserHash=enabled


[PurgeUrlBuilder]
# Use MugoVarnishPageUrlBuilder to control ban condition via Url Alias (and other settings below)
# Use MugoVarnishLocationIdBuilder with site.ini Listeners[]=content/view@MugoVarnishEvents::addXLocationIdHeader to control ban condition only via X-Location-Id header
# You can use tour own builder implementing MugoVarnishBuilderInterface
BuilderClass=MugoVarnishPageUrlBuilder

# Include/Exclude system URLs. Normally, that should be disabled
PurgeSystemURL=disabled

# Specify a PathPrefixModifier in case your public siteaccess has
# it configured in the site.ini.
# If specified any purge requests get modified like this
# preg_replace('/^' . preg_quote( $PathPrefixModifier, '/' ), '', $url )
PathPrefixModifier=

# Apply URI transformation before sending it to varnish
# Needs to be enabled if you ezp installed in a subdirectory
UriTransformation=enabled

# Specify a Modifier in case you want to do further modification
# to the URL before it's send to varnish. The modifier is executed
# after the UriTransformation
# preg_replace( $ModifierMatch ), $ModifierReplace, $url )
# Example:
#ModifierMatch=/^\/backend(.*)/
#ModifierReplace=$1

# Omit URLs by regular expression
# Those regular expressions are executed before the PathPrefix Modifier
# and the UriTransformation. So the regular expression has to match a
# relative URL like '/about/contact_us'
OmitUrlPatterns[]
#OmitUrlPatterns[]=/^\/Media\//

# Add a condition to match specific hosts. Allowed configuration values are:
# - RelatedSiteAccessList (not supported yet)
# - SiteURL
# - None
HostMatching=None
